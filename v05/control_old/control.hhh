IF	STATE = Q1 THEN
		INSTRUCTION <= ROM_DATA(PC); 
		IF	INSTRUCTION(15 DOWNTO 10) = B"001001" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= ADDWF;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"001000" THEN		 
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= ADDWFC;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"000101" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= ANDWF;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"001010" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= INCF;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"000100" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= IORWF;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"010111" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= SUBWF;
			STATE		<= Q2;
		ELSIF	INSTRUCTION(15 DOWNTO 10) = B"010110" THEN	
			ALU_SELECT	<= '1';
			INSTR_ALU_in	<= SUBWFB;
			STATE		<= Q2;
		END IF;

		--END IF;	-- ELSIF for next instruction

ELSIF	STATE =	Q2 THEN
	IF ALU_SELECT <= '1'THEN
		OPERAND_ALU_in <= RAM(INSTRUCTION(7 DOWNTO 0)); -- to add check for a (bit 8 ) when addres decode
		STATE <= Q3;
	END IF; -- ELSIF for next instruction type	

ELSIF	STATE = Q3 THEN 
	IF ALU_SELECT <= '1'THEN
		STATE <= Q4;
	END IF;

ELSIF	STATE = Q4 THEN	
	IF ALU_SELECT <= '1'THEN
		ALU_SELECT <= '0';
		IF INSTRUCTION(9) = '1' THEN
			RAM(INSTRUCTION(7 DOWNTO 0)) <= RESULT_out;
		ELSIF INSTRUCTION(9) = '0' THEN	
			W_reg <= RESULT_out;
		ELSE
			W_reg <= RESULT_out;
		END IF;
	STATE <= Q1;
END IF;	
